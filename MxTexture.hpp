#ifndef MX_TEXTURE_HPP
#define MX_TEXTURE_HPP

#include <QGraphicsScene>
#include <QVideoFrame>
#include <QMediaPlayer>

class MxVideoSurface;
class QOpenGLWidget;
class QOpenGLTexture;
class QPixmap;
class QSharedMemory;

class MxTexture : public QObject {
	Q_OBJECT

public:
	// COnstructor for texture from file
	MxTexture(QOpenGLWidget *widget, const QString &filePath, QObject *parent = 0);

	// Constructor for shared texture
	MxTexture(QOpenGLWidget *widget, const QString &key, int width, int height, QObject *parent = 0);

	~MxTexture();

	// Bind this texture as current texture used by OpenGL
	void bind();

	// Release this texture from the current texture used by OpenGL
	void release();

	// Invalidates the shared texture
	bool invalidateSharedTexture();

signals:
	// Signal to emit when texture has loaded / changed
	void invalidate(const QRectF & rect = QRectF(), QGraphicsScene::SceneLayers layers = QGraphicsScene::AllLayers);

private:
	static QStringList IMAGE_SUFFIXES;
	static QStringList VIDEO_SUFFIXES;

	// OpenGL
	QOpenGLWidget *mOpenGLWidget;
	QOpenGLTexture *mOpenGLTexture;

	// Image
	QImage *mImage;

	// Video
	QMediaPlayer *mVideoPlayer;
	MxVideoSurface *mVideoSurface;

	// Shared texture data for visuals generated by other programs
	QSharedMemory * mSharedMemory;
	int mSharedTextureWidth;
	int mSharedTextureHeight;

	// Load image from file path
	void loadImage(const QString &filePath);

	// Load video from file path
	void loadVideo(const QString &filePath);

	// Test if file from filepath is an image
	bool isImage(const QString &filePath);

	// Test if file from filepath is a video
	bool isVideo(const QString &filePath);

private slots:
	// Called when player is playing a video frame
	void onVideoFrame(const QVideoFrame &frame);

	// Called when player encounters an error
	void onMediaPlayerError(QMediaPlayer::Error error);
};

#endif
